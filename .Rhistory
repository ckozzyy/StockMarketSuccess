getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "DIS", auto.assign = TRUE)
plot(DIS$DIS.Close)
install.packages("quantmod")
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
KO.pred <- HoltWinters(KO$KO.Close, beta = FALSE, gamma = FALSE)
KO.pred
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
KO.pred <- HoltWinters(KO$KO.Close, beta = FALSE, gamma = FALSE)
KO.pred
plot(KO.pred)
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
install.packages("quantmod")
?nls
#Math Graphing
plot(nls(data = KO$KO.Close))
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
