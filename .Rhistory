<<<<<<< HEAD
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
=======
>>>>>>> 337834e737139b27ee2768149e18f4d1f72fe10e
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
<<<<<<< HEAD
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "DIS", auto.assign = TRUE)
plot(DIS$DIS.Close)
install.packages("quantmod")
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
KO.pred <- HoltWinters(KO$KO.Close, beta = FALSE, gamma = FALSE)
KO.pred
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
KO.pred <- HoltWinters(KO$KO.Close, beta = FALSE, gamma = FALSE)
KO.pred
plot(KO.pred)
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
install.packages("quantmod")
?nls
#Math Graphing
plot(nls(data = KO$KO.Close))
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
#plot
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
=======
#holt winters forecasting
TSLA.pred <- HoltWinters(TSLA$TSLA.Close, beta = FALSE, gamma = FALSE)
TSLA.pred
plot(TSLA.pred)
install.packages("forecast")
library("forecast")
TSLA.pred2 <- forecast:::forecast.HoltWinters(TSLA.pred, h = 100)
TSLA.pred2
forecast:::plot.forecast(TSLA.pred2)
#neural networks
install.packages("neuralnet")
library("neuralnet")
?neuralnet
TSLA
head(TSLA)
TSLA.neural <- neuralnet(Predicted~TSLA$TSLA.Open + TSLA$TSLA.High + TSLA$TSLA.Low + TSLA$TSLA.Volume, data = TSLA)
TSLA.neural <- neuralnet(TSLA.$TSLA.Close~TSLA$TSLA.Open + TSLA$TSLA.High + TSLA$TSLA.Low + TSLA$TSLA.Volume, data = TSLA)
TSLA.neural <- neuralnet(TSLA.Close~TSLA$TSLA.Open + TSLA$TSLA.High + TSLA$TSLA.Low + TSLA$TSLA.Volume, data = TSLA)
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open + TSLA.High + TSLA.Low + TSLA.Volume, data = TSLA)
plot(TSLA.neural)
plot(TSLA.neural)
prediction(TSLA.neural)
plot(prediction(TSLA.neural))
?prediction
plot(TSLA.neural)
nrow(TSLA)
TSLA.train <- TSLA[1:1656] #75% of data set
TSLA.test <- TSLA[1657:]
TSLA.test <- TSLA[1657:,]
TSLA.train <- TSLA[1:1656] #75% of data set
TSLA.test <- TSLA[1657:2208]
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open + TSLA.High + TSLA.Low + TSLA.Volume, data = TSLA.train)
TSLA.train <- TSLA[1:1656] #75% of data set
TSLA.test <- TSLA[1657:2208]
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open + TSLA.High + TSLA.Low + TSLA.Volume, data = TSLA.train)
plot(TSLA.neural)
TSLA.predict <- compute(TSLA.neural, TSLA.test)
TSLA.predict$net.result
TSLA.train <- TSLA[1:1656] #75% of data set
TSLA.test <- TSLA[1657:2208]
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open + TSLA.High + TSLA.Low , data = TSLA.train)
plot(TSLA.neural)
TSLA.predict <- compute(TSLA.neural, TSLA.test)
TSLA.predict$net.result
plot(TSLA.train)
plot(TSLA.test)
plot(TSLA.train)
plot(TSLA.train)
plot(TSLA)
plot(TSLA$TSLA.Close)
plot(TSLA.train$TSLA.Close)
plot(TSLA.test$TSLA.close)
plot(TSLA.test$TSLA.close)
plot(TSLA.test$TSLA.Close)
TSLA.train <- TSLA[1:1656] #75% of data set
TSLA.test <- TSLA[1657:2208]
plot(TSLA$TSLA.Close)
plot(TSLA.train$TSLA.Close)
plot(TSLA.test$TSLA.Close)
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open + TSLA.High + TSLA.Low , data = TSLA.train)
plot(TSLA.neural)
TSLA.predict <- compute(TSLA.neural, TSLA.test)
plot(TSLA.predict$net.result)
plot(TSLA.neural)
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open:TSLA.Volume + TSLA.High + TSLA.Low , data = TSLA.train)
plot(TSLA.neural)
TSLA.predict <- compute(TSLA.neural, TSLA.test)
plot(TSLA.predict$net.result)
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open:TSLA.Volume + TSLA.High + TSLA.Low , data = TSLA.train)
TSLA.neural <- neuralnet(TSLA.Close~TSLA.Open+TSLA.Volume + TSLA.High + TSLA.Low , data = TSLA.train)
plot(TSLA.neural)
>>>>>>> 337834e737139b27ee2768149e18f4d1f72fe10e
#NLS
require(graphics)
require(graphics)
KO.nls <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), KO))
KO.nls <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), KO)
require(graphics)
DNase1 <- subset(DNase, Run == 1)
## using a selfStart model
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)
summary(fm1DNase1)
summary(fm1DNase1)
plot(fm1DNase1)
plot(DNase1)
plot(KO)
plot(fm1KO)
## using a selfStart model
fm1KO <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), KO)
View(DNase1)
equire(graphics)
## using a selfStart model
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)
summary(fm1DNase1)
plot(fm1DNase1)
plot(KO$KO.Close)
#Installing quantmod
install.packages("quantmod")
library("quantmod")
#Task: get data into file
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
View(KO)
View(KO)
#NLS
library(zoo)
z <- as.zoo(UNRATE)
getSymbols('UNRATE', src = 'KO')
?getSymbols
getSymbols('UNRATE', src = 'Coca Cola')
getSymbols('UNRATE', src = 'CocaCola')
library(zoo)
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), start = time('2007-01-03'))
install.packages("forecast")
?nls
#Installing quantmod annd other libraries
install.packages("quantmod")
library("quantmod")
library(zoo)
KO.df <- data.frame(Y = as.matrix(KO$KO.Close), date = time())
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), start = time('2007-01-03'))
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), start = getInitial(KO$KO.Close))
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), start = getInitial(KO$KO.Close))
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), start = getInitial(data = KO$KO.Close))
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), start = getInitial(object = KO$KO.Close))
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), KO$KO.Close)
KO.df <- data.frame(Y = as.matrix(KO$KO.Close), date = time())
KO.df <- data.frame(Y = as.matrix(KO$KO.Close), date = time())
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close)+20), KO)
?date
View(KO)
KO.df <- data.frame(Y = as.matrix(KO$KO.Close))
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close))+20, KO)
model <- nls(KO$KO.Close~20*log(200*time(KO$KO.Close))+20, KO.df)
model <- nls(KO$KO.Close~a*log(b*time(KO$KO.Close))+c, start=list(a = 20, b = 200, c = 20))
install.packages("quantmod")
library("quantmod")
library(zoo)
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
model <- nls(KO$KO.Close~a*log(b*time(KO$KO.Close))+c, start=list(a = 20, b = 200, c = 20))
install.packages("quantmod")
library("quantmod")
install.packages("quantmod")
getSymbols(Symbols = "DIS", auto.assign = TRUE)
plot(DIS$DIS.Close)
DIS.pred <- HoltWinters(DIS$DIS.Close, beta = FALSE, gamma = FALSE)
DIS.pred
plot(DIS.pred)
getSymbols(Symbols = "DIS", auto.assign = TRUE)
plot(DIS$DIS.Close)
plot(DIS$DIS.Close)
View(DIS)
install.packages("quantmod")
library("quantmod")
library(zoo)
install.packages("quantmod")
getSymbols(Symbols = "DIS", auto.assign = TRUE)
plot(DIS$DIS.Close)
library("zoo")
library("zoo")
#Task: get data into file
getSymbols(Symbols = "DIS", auto.assign = TRUE)
DIS.pred <- HoltWinters(DIS$DIS.Close, beta = FALSE, gamma = FALSE)
DIS.pred
plot(DIS.pred)
plot(KO.pred)
plot(KO$KO.Close)
install.packages("xlsx")
library("xlsx")
library(xlsx)
#Installing quantmod annd other libraries
install.packages("quantmod")
install.packages("xlsx")
library("quantmod")
library(xlsx)
install.packages("quantmod")
write.xlsx(KO$KO.Close, "Documents/GitHub/StockMarketSuccess/KOClose.xslx")
library("xlsx")
library("quantmod")
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
plot(DIS$DIS.Close)
library("quantmod")
plot(DIS$DIS.Close)
plot(KO$KO.Close)
#filtering for all of the relevant data.
#Getting rid of all of the "noise"
KO.rel <- KO$KO.Close[1000:nrow(KO$KO.Close),]
plot(KO.rel)
#filtering for all of the relevant data.
#Getting rid of all of the "noise"
KO.rel <- KO$KO.Close[1500:nrow(KO$KO.Close),]
plot(KO.rel)
plot(KO$KO.Close)
plot(KO.rel)
plot(DIS$DIS.Close)
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
DIS.rel <- DIS$DIS.Close[2000:nrow(DIS$DIS.Close),]
plot(DIS.rel)
plot(DIS$DIS.Close)
plot(DIS.rel)
plot(DIS$DIS.Close)
plot(DIS.rel)
plot(KO.rel)
plot(KO.rel)
#put in linear regression
lines(density(KO.rel), lty = 1)
plot(KO.rel)
#put in linear regression
lines(density(KO.rel), lty = 5)
plot(KO.rel)
lines(density(KO.rel), lty = 5)
KO.rel <- KO$KO.Close[1500:nrow(KO$KO.Close),]
plot(KO.rel)
#put in linear regression
addLines(lm(Cl(KO.rel)~index(KO.rel)),col="blue", on=1)
end = as.character(last(index(KO)))
start = as.character(TimeWarp::dateWarp(last(index(KO)),"-3 years"))
subset = KO[paste(start,end,sep="/")]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(KO.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
install.packages("TimeWarp")
library(TimeWarp)
end = as.character(last(index(KO)))
start = as.character(TimeWarp::dateWarp(last(index(KO)),"-3 years"))
subset = KO[paste(start,end,sep="/")]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(KO.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
#put in linear regression
#end = as.character(last(index(KO)))
#start = as.character(TimeWarp::dateWarp(last(index(KO)),"-3 years"))
subset = KO[1500:nrow(KO),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
??chartseries
library(quantmod)
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
indices = 1:nrow(subset)
model=lm(KO.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset <- DIS$DIS.Close[2000:nrow(DIS$DIS.Close),]
install.packages("quantmod")
install.packages("TimeWarp")
library("quantmod")
library(TimeWarp)
install.packages("quantmod")
subset <- DIS$DIS.Close[2000:nrow(DIS$DIS.Close),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(DIS.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset <- DIS$DIS.Close[2000:nrow(DIS$DIS.Close),]
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset <- DIS[2000:nrow(DIS),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
install.packages("TimeWarp")
#Installing quantmod
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
library(TimeWarp)
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset <- DIS[2000:nrow(DIS),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(DIS.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset <- TSLA[2000:nrow(TSLA),]
tsla.sub <- TSLA$TSLA.Close[2000:nrow(TSLA$TSLA.Close)]
plot(tsla.sub)
tsla.sub <- TSLA$TSLA.Close[1800:nrow(TSLA$TSLA.Close)]
plot(tsla.sub)
tsla.sub <- TSLA$TSLA.Close[1500:nrow(TSLA$TSLA.Close)]
plot(tsla.sub)
tsla.sub <- TSLA$TSLA.Close[1600:nrow(TSLA$TSLA.Close)]
plot(tsla.sub)
tsla.sub <- TSLA$TSLA.Close[1700:nrow(TSLA$TSLA.Close)]
plot(tsla.sub)
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset <- TSLA[1700:nrow(TSLA),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(TSLA.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
install.packages("quantmod")
install.packages("TimeWarp")
install.packages("xts")
install.packages("forecast")
install.packages("zoo")
install.packages("lubridate")
install.packages("neuralnet")
install.packages("BBmisc")
install.packages("quantmod")
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
install.packages("quantmod")
library(quantmod)
getSymbols(Symbols = "TSLA", auto.assign = TRUE)
plot(TSLA$TSLA.Close)
getSymbols(Symbols = "KO", auto.assign = TRUE)
plot(KO$KO.Close)
getSymbols(Symbols = "DIS", auto.assign = TRUE)
plot(DIS$DIS.Close)
subset = KO[1500:nrow(KO),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(KO.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
# Draw line
abline(model$coefficients[1],model$coefficients[2])
#Filtering for all of the relevant data.
#Getting rid of all of the "noise"
subset = KO[1500:nrow(KO),]
# Work with subset from now on. Chart subset (note I removed
# subset argument from call to chartSeries)
chartSeries(subset, TA = NULL, theme = "white", up.col = "green", dn.col = "red")
# Linear model on same range as your chart
indices = 1:nrow(subset)
model=lm(KO.Close~indices,data=subset)
# Draw line
abline(model$coefficients[1],model$coefficients[2])
TSLA.pred <- HoltWinters(TSLA$TSLA.Close, beta = FALSE, gamma = FALSE)
TSLA.pred
plot(TSLA.pred)
TSLA.pred2 <- forecast:::forecast.HoltWinters(TSLA.pred, h = 50)
TSLA.pred2
forecast:::plot.forecast(TSLA.pred2)
install.packages("quantmod")
install.packages("TimeWarp")
install.packages("xts")
install.packages("forecast")
install.packages("zoo")
install.packages("lubridate")
install.packages("quantmod")
install.packages(c("quantmod", "TimeWarp", "xts", "forecast", "zoo", "lubridate", "neuralnet", "BBmisc"))
install.packages("BBmisc")
